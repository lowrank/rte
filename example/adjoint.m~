opt = struct('anisotropy', 0.8);

obj = rte(opt);

f = @(x,y,v) 1;
sigmaS = @(x) (5 + 0.2 * x(1, :));
sigmaT = @(x) (0.2 *  x(1, :) + 5 + x(2,:) * 0.2);

obj.setBoundaryCondition(f);
obj.setCoefficents(sigmaT, sigmaS);

x1 = obj.ForwardSolve();

obj.plot(x1);

% then we compute the adjoint equation.


g = @(x,y ,v) 2;
obj.setBoundaryCondition(g);
obj.setCoefficents(sigmaT, sigmaS);

x2 = obj.ForwardSolve();

obj.plot(x2);

% flip directions.
nAngle = obj.nAngle;

x3 = [x2(65:end, :) ; x2(1:64, :)]; % flipped solution (true solution)

% on boundary.
Lbd = size(obj.segms, 2);

s = 0;

for i = 1:Lbd
    cur_edge = obj.segms(:, i);
    
    v = obj.nodes(:, cur_edge(1)) - obj.nodes(:, cur_edge(2));
    n = [v(2) -v(1)]/norm(v);
    
    for j = 1:nAngle
        
        s = s + 0.5 * x3
        
    end
    
end




